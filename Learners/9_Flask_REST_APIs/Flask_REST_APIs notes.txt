# Flask_REST_APIs notes.txt
📌 What Is a REST API?
A REST API (Representational State Transfer) allows communication between systems via HTTP. In ML, it’s used to send input data to a model and receive predictions.

🧠 Why Use Flask?
Lightweight Python web framework

Ideal for serving models and exposing endpoints

Easy to integrate with ML libraries (like scikit-learn, joblib, pandas)

⚙️ Typical Architecture
rust
Copy
Edit
Client  <----->  Flask API  <----->  ML Model
         JSON            .pkl/.joblib
🔧 Core Components of an ML API
Component	Purpose
/predict	Accepts input data and returns model prediction
/health	Returns a basic status (useful for monitoring)
Model Loader	Loads a pre-trained ML model (e.g., .pkl, .joblib)
Input Validation	Checks for missing or invalid inputs

🔐 Security & Scalability (Optional Advanced Topics)
Add authentication (JWT, tokens)

Run behind Nginx/Gunicorn

Dockerize the app for deployment

✅ 2. Python Files for Flask REST API
We’ll create a Flask API that loads a trained Random Forest classifier and exposes a /predict endpoint.

Structure:

vbnet
Copy
Edit
/ml_api_project
│
├── model.pkl                ✅ Trained model
├── app.py                   ✅ Flask API
├── requirements.txt         ✅ Dependencies
└── test_client.py           ✅ (Optional) Client to send POST requests